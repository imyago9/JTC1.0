VERIFY_CREDENTIALS_QUERY="SELECT user_id, password FROM users WHERE username = %s OR email = %s"
CHANGE_PASSWORD_QUERY="UPDATE users SET password = %s WHERE email = %s"
CHECK_IF_IDENTIFIER_EXISTS="SELECT EXISTS (SELECT 1 FROM users WHERE username = %s OR email = %s)"
CREATE_USER_QUERY="INSERT INTO users (username, password, email) VALUES (%s, %s, %s) RETURNING user_id"
USERNAME_TO_USER_ID_QUERY="SELECT user_id FROM users WHERE username = %s"
GET_FRIENDS_LIST_QUERY="SELECT DISTINCT u.user_id, u.username FROM friends f JOIN users u ON ((f.friend_id = u.user_id AND f.user_id = %s) OR (f.user_id = u.user_id AND f.friend_id = %s)) WHERE f.status = %s;"
GET_FRIEND_REQUESTS_QUERY="SELECT u.user_id, u.username FROM friends f JOIN users u ON f.user_id = u.user_id WHERE f.friend_id = %s AND f.status = 'pending';"
ACCEPT_FRIEND_REQUEST__UPDATE_QUERY="UPDATE friends SET status = 'accepted' WHERE user_id = %s AND friend_id = %s AND status = 'pending';"
ACCEPT_FRIEND_REQUEST_REVERSE_QUERY="INSERT INTO friends (user_id, friend_id, status) VALUES (%s, %s, 'accepted') ON CONFLICT (user_id, friend_id) DO NOTHING;"
REJECT_FRIEND_REQUEST_QUERY="DELETE FROM friends WHERE (user_id = %s AND friend_id = %s) OR (user_id = %s AND friend_id = %s);"
SEND_FRIEND_REQUEST_QUERY="INSERT INTO friends (user_id, friend_id, status) VALUES (%s, %s, 'pending') ON CONFLICT (user_id, friend_id) DO NOTHING;"
GET_TRADES_FOR_ACCOUNT_ID_QUERY="SELECT t.trade_id, t.instrument, t.direction, t.entry_time, t.exit_time, t.profit, t.com,te.entry_price, te.entry_qty, tx.exit_price, tx.exit_qty, tz.strength, tz.basetime, tz.freshness, tz.trend, tz.curve, tz.profitzone FROM trades t LEFT JOIN trade_entries te ON t.trade_id = te.trade_id LEFT JOIN trade_exits tx ON t.trade_id = tx.trade_id LEFT JOIN trade_zones tz ON t.trade_id = tz.trade_id WHERE t.account_id = %s ORDER BY t.entry_time DESC;"
CHECK_ACCOUNT_MONEY_VISIBILITY_QUERY="SELECT money_visibility FROM accounts WHERE account_id = %s;"
SELECT_ACCOUNTS_FROM_TYPE_QUERY="SELECT account_id, account_name, account_type FROM accounts WHERE user_id = %s AND account_type = %s;"
SELECT_ALL_ACCOUNTS_QUERY="SELECT account_id, account_name, account_type FROM accounts WHERE user_id = %s;"
INSERT_NEW_ACCOUNT_QUERY="INSERT INTO accounts (user_id, account_name, account_type) VALUES (%s, %s, %s);"